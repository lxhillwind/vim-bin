name: Build Auto

on:
  schedule:
  - cron: '0 0 1 * *'

jobs:

  version-detect:

    runs-on: ubuntu-latest

    steps:
    - name: Detect latest stable version
      run: printf '%s\n' "$(curl -Ls https://api.github.com/repos/vim/vim/tags | jq '.[0].name' -r)" > latest.txt

    - name: Gather all tagged version
      run: curl -Ls https://api.github.com/repos/lxhillwind/vim-bin/releases | jq -r '.[].tag_name' | sort > tagged.txt

    - name: Detect if tagged
      # fail if already exists.
      run: test -z "$(comm -12 latest.txt tagged.txt)"

    - name: Share version
      uses: actions/upload-artifact@v4
      with:
        name: ver
        path: latest.txt

  build-linux:

    runs-on: ubuntu-latest
    needs: version-detect

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Download version
      uses: actions/download-artifact@v4
      with:
        name: ver

    - name: Build the Docker image
      run: docker build . --file Dockerfile --build-arg VIM_VERSION=$(cat latest.txt) --tag vim-build:$(cat latest.txt)

    - name: Generate artifacts
      run: docker run --rm -i vim-build:$(cat latest.txt) cat /out/vim-$(cat latest.txt).tar.xz > vim-linux-x64.tar.xz

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: vim-linux
        path: vim-linux-x64.tar.xz

  build-win32-x86:

    runs-on: ubuntu-latest
    needs: version-detect

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Download version
      uses: actions/download-artifact@v4
      with:
        name: ver

    - name: Build the Docker image
      run: docker build . --file Dockerfile.mingw-x86 --build-arg VIM_VERSION=$(cat latest.txt) --tag vim-build-win32-x86:$(cat latest.txt)

    - name: Generate artifacts
      run: |
        docker run --rm -i vim-build-win32-x86:$(cat latest.txt) cat /out/vim-$(cat latest.txt).7z > vim-win32-x86.7z;
        docker run --rm -i vim-build-win32-x86:$(cat latest.txt) cat /out/vim-$(cat latest.txt).zip > vim-win32-x86.zip;

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: vim-win32-x86
        path: vim-win32-x86.7z

    - name: Upload binary (zip)
      uses: actions/upload-artifact@v4
      with:
        name: vim-win32-x86-zip
        path: vim-win32-x86.zip

  build-win32-x64:

    runs-on: ubuntu-latest
    needs: version-detect

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Download version
      uses: actions/download-artifact@v4
      with:
        name: ver

    - name: Build the Docker image
      run: docker build . --file Dockerfile.mingw-x64 --build-arg VIM_VERSION=$(cat latest.txt) --tag vim-build-win32-x64:$(cat latest.txt)

    - name: Generate artifacts
      run: |
        docker run --rm -i vim-build-win32-x64:$(cat latest.txt) cat /out/vim-$(cat latest.txt).7z > vim-win32-x64.7z;
        docker run --rm -i vim-build-win32-x64:$(cat latest.txt) cat /out/vim-$(cat latest.txt).zip > vim-win32-x64.zip;

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: vim-win32-x64
        path: vim-win32-x64.7z

    - name: Upload binary (zip)
      uses: actions/upload-artifact@v4
      with:
        name: vim-win32-x64-zip
        path: vim-win32-x64.zip

  release:

    runs-on: ubuntu-latest
    needs: [build-linux, build-win32-x86, build-win32-x64]

    steps:
    - name: Download version
      uses: actions/download-artifact@v4
      with:
        name: ver

    - name: Download linux
      uses: actions/download-artifact@v4
      with:
        name: vim-linux

    - name: Download win32 (x86)
      uses: actions/download-artifact@v4
      with:
        name: vim-win32-x86

    - name: Download win32 (x64)
      uses: actions/download-artifact@v4
      with:
        name: vim-win32-x64

    - name: Download win32 (x86; zip)
      uses: actions/download-artifact@v4
      with:
        name: vim-win32-x86-zip

    - name: Download win32 (x64; zip)
      uses: actions/download-artifact@v4
      with:
        name: vim-win32-x64-zip

    - name: Set version
      id: latest-ver-get
      run: printf 'latest=%s\n' $(cat latest.txt) >> $GITHUB_OUTPUT

    - name: Checksum
      id: checksum
      run: |
        printf 'linux-x64=%s\n' $(sha256sum vim-linux-x64.tar.xz | cut -d' ' -f1) >> $GITHUB_OUTPUT;
        printf 'win32-x86=%s\n' $([ -f vim-win32-x86.7z ] && { sha256sum vim-win32-x86.7z | cut -d' ' -f1; } || echo 'empty') >> $GITHUB_OUTPUT;
        printf 'win32-x64=%s\n' $([ -f vim-win32-x64.7z ] && { sha256sum vim-win32-x64.7z | cut -d' ' -f1; } || echo 'empty') >> $GITHUB_OUTPUT;
        printf 'win32-x86-zip=%s\n' $([ -f vim-win32-x86.zip ] && { sha256sum vim-win32-x86.zip | cut -d' ' -f1; } || echo 'empty') >> $GITHUB_OUTPUT;
        printf 'win32-x64-zip=%s\n' $([ -f vim-win32-x64.zip ] && { sha256sum vim-win32-x64.zip | cut -d' ' -f1; } || echo 'empty') >> $GITHUB_OUTPUT;

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.latest-ver-get.outputs.latest }}
        release_name: Package ${{ steps.latest-ver-get.outputs.latest }}
        draft: false
        prerelease: false
        body: |
          Package ${{ steps.latest-ver-get.outputs.latest }}

          sha256sum:

          - `${{ steps.checksum.outputs.linux-x64 }}  vim-${{ steps.latest-ver-get.outputs.latest }}-linux-x64.tar.xz`
          - `${{ steps.checksum.outputs.win32-x86 }}  vim-${{ steps.latest-ver-get.outputs.latest }}-win32-x86.7z` (compiled for Windows XP; **USE AT YOUR OWN RISK!**)
          - `${{ steps.checksum.outputs.win32-x64 }}  vim-${{ steps.latest-ver-get.outputs.latest }}-win32-x64.7z`
          - `${{ steps.checksum.outputs.win32-x86-zip }}  vim-${{ steps.latest-ver-get.outputs.latest }}-win32-x86.zip` (compiled for Windows XP; **USE AT YOUR OWN RISK!**)
          - `${{ steps.checksum.outputs.win32-x64-zip }}  vim-${{ steps.latest-ver-get.outputs.latest }}-win32-x64.zip`

          (`*.7z` and `*.zip` only differ in compression method and archive size.)

    - name: Upload Release Asset linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./vim-linux-x64.tar.xz
        asset_name: vim-${{ steps.latest-ver-get.outputs.latest }}-linux-x64.tar.xz
        asset_content_type: application/x-tar

    - name: Upload Release Asset win32 (x86)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./vim-win32-x86.7z
        asset_name: vim-${{ steps.latest-ver-get.outputs.latest }}-win32-x86.7z
        asset_content_type: application/x-7z-compressed

    - name: Upload Release Asset win32 (x64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./vim-win32-x64.7z
        asset_name: vim-${{ steps.latest-ver-get.outputs.latest }}-win32-x64.7z
        asset_content_type: application/x-7z-compressed

    - name: Upload Release Asset win32 (x86; zip)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./vim-win32-x86.zip
        asset_name: vim-${{ steps.latest-ver-get.outputs.latest }}-win32-x86.zip
        asset_content_type: application/x-zip-compressed

    - name: Upload Release Asset win32 (x64; zip)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./vim-win32-x64.zip
        asset_name: vim-${{ steps.latest-ver-get.outputs.latest }}-win32-x64.zip
        asset_content_type: application/x-zip-compressed
